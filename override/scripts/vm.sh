#!/usr/bin/env bash

set -euo pipefail

host_ssh_port=4343

iso_url="https://cdn.intra.42.fr/isos/OverRide.iso"

vm_dir="$PWD"

vm_os="Linux_64"
vm_image="$vm_dir/$(basename "$iso_url")"
vm_name="OverRide"
vm_ram="1024"
vm_vram="0"
vm_gfx="none"
vm_net="nat"

vm_ssh_port="4242"

SSH_OPTIONS=(-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no)

PATH="$(dirname "$0")/utils/:$PATH"

print_help()
{
	echo -e "Usage $0 [command]
Commands:
    up      Setup and stat the virtual machine.
    down    Unregister and delete the virtual machine.
    ip      Show a running virtual machine's IPV4 address.
    ssh     Connect to the virtual machine using SSH.
    help    Show this help message.

If no argument is provided, 'up' will be assumed."
}

print_ssh_usage()
{
	echo -e "Usage: $0 ssh user[:pass]"
}

print_vm_stopped()
{
	echo -e "\"$vm_name\" is not running!

Use '$0 up' to start it up." 1>&2
}

print_vm_started()
{
	echo -e "\"$vm_name\" was already started!

Use '$0 ssh' to connect."
}

vm.exists()
{
	VBoxManage showvminfo "$vm_name" > /dev/null 2>&1
}

vm.running()
{
	VBoxManage list runningvms | grep "\"$vm_name\"" > /dev/null
}

vm.up()
{
	if ! vm.exists
	then
		# Download the disk image.
		pushd "$(dirname "$vm_image")"
			while ! md5sum --check md5sums
			do
				echo "Fetching '$vm_image'..."

				curl -L -O -C - "$iso_url" --output "$vm_image"
			done
		popd

		echo "Initializing \"$vm_name\" at '$vm_dir'..."

		# Create and register vm in current working directory.
		VBoxManage createvm --name "$vm_name" --ostype "$vm_os" --register --basefolder "$vm_dir"
		VBoxManage modifyvm "$vm_name" --memory "$vm_ram" --vram "$vm_vram" --graphicscontroller "$vm_gfx" --nic1 "$vm_net" --natpf1 "ssh,tcp,,$host_ssh_port,,$vm_ssh_port"

		# Add an IDE controller
		VBoxManage storagectl "$vm_name" --name "IDE Controller" --add ide --controller PIIX4

		# Attach the disk image.
		VBoxManage storageattach "$vm_name" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium "$vm_image"
	fi

	if ! vm.running
	then
		echo "Starting \"$vm_name\"..."
		VBoxManage startvm "$vm_name" --type headless
	else
		print_vm_started 2>&1
		return 1
	fi
}

vm.down()
{
	if vm.exists
	then
		if vm.running
		then
			echo "Waiting for \"$vm_name\" to power off,,,"
			VBoxManage controlvm "$vm_name" poweroff && sleep 2
		fi
		echo "Tearing down \"$vm_name\"..."
		VBoxManage unregistervm "$vm_name" --delete
	fi
}

vm.ipv4()
{
	if [ "$vm_net" = nat ]
	then
		echo "localhost"
	elif vm.running
	then
		VBoxManage guestproperty get "$vm_name" /VirtualBox/GuestInfo/Net/0/V4/IP | cut -d' ' -f2
	else
		print_vm_stopped 2>&1
		return 1
	fi
}

vm.ssh_port()
{
	if [ "$vm_net" = nat ]
	then
		echo "$host_ssh_port"
	else
		echo "$vm_ssh_port"
	fi
}

vm.ssh() # user [executable]
{
	local executable="${1:-ssh}"; shift
	local user="${1:-}"; shift

	if [ -z "$user" ]
	then
		echo "$0: ssh: Missing user argument." 2>&1
		print_ssh_usage 2>&1
		return 1
	fi

	if vm.running
	then
		local port

		port=$(vm.ssh_port)

		[ "$TERM" = alacritty ] && TERM=xterm

		local pass="${user#*:}" 
		local path="$pass"
		pass="${pass%:*}"
		path="${path:$((${#pass} + 1))}"

		local cmd=("$executable" "${SSH_OPTIONS[@]}")

		case "$executable" in
			scp	)
				cmd+=(-P "$port");;

			*	)
				cmd+=(-p "$port");;
		esac

		if [ -n "$pass" ]
		then
			cmd=(pass.exp "$pass" "${cmd[@]}" "${user%%:*}@$(vm.ipv4)${path:+:${path}}")
		else
			cmd+=("$user@$(vm.ipv4)${path:+:${path}}")
		fi

		cmd+=("$@")

		"${cmd[@]}"
	else
		print_vm_stopped 2>&1
		return 1
	fi
}

case "${1:-}" in
	"up" | ""	)	vm.up;;
	"down"		)	vm.down;;
	"ip"		)	vm.ipv4;;
	"ssh"		)	vm.ssh "$@";;
	"scp"		)	vm.ssh "$@";;
	"help"		)	print_help;;
	*			)	print_help && exit 1;;
esac
