it looks like buffer overflow
we read 2 times length of 4096 on stdin, which will leave us plenty of room for shell code

then we put our data in to 2 strings of size 20, where we can ommit \0
to screw up the cat and get control of program exec

so we start with big mop-slide, then shelcode like 2000 nop long . eeverything is put on stack, we go out of 1st p call and do the 2nd read

2nd read 20 chars to screw cat and get control of program. offset is 9 so 9 + adress read start + offset > 20 + 7 padding
at the end of the 2nd p call where the read pointed we have 20 chars av 2 + rest of 1st read - 20 chars, or nopslide + payload

 final answer
 (cat file; python -c "print 'A' * 9 + '\xf4\xe6\xff\xbf' + 'B' * 7"; cat) | ./bonus0


 file output du exploit.py
