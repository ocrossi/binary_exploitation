##Exploit type: buffer overflow with shellcode to insert own instructions
				into vulnerable program

in gdb
info functions shows us a gets in function p
we think using bufferoverflow. No place in the code to give us a convenient
privilege escalation, so we insert our own. We would be able to redirect code exec
to the stack where gets writes our input, but a if makes sure that we dont override return
address with an address belonging to the stack. But we have a strdup that writes user input
on heap
So the idea is to override return address with address where strdup writes user input

then with gdb we get with 76 chars a segfault
fiddling a bit in gdb we can see 84 chars is the sweet spot to smash return adress on stack
with 84 chars we can overwrite return ptr to main
and take control of program execution flow

disass p, break line 106, check valie of ebp, we can stack smash
now we need address of malloc, which is stored in eax register since we did strdup 2 instructions ago

there is some string manip on the strdup part when we look at it after strdup, so nop slide should not be more than 64ish long

now we need an exploit of type (nop slide 40 + shell_code 21 + padding 19 + address of stack ptr) = 84 length
